service: tangential
frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-offline-sqs

useDotenv: true
package:
  individually: ${self:custom.packageIndividually.${self:provider.stage}, true}

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 600
  stage: ${opt:stage, 'offline'}
  region: us-east-1
  iam:
    role:
      statements: ${file(./iam-role.yml)}

  environment:
    jiraAnalysisQueueUrl: ${self:custom.jiraAnalysisQueueUrl.${self:provider.stage}, self:custom.jiraAnalysisQueueUrl.remote}
    updateProjectAnalysisStatusQueueUrl: ${self:custom.updateProjectAnalysisStatusQueueUrl.${self:provider.stage}, self:custom.updateProjectAnalysisStatusQueueUrl.remote}
    textReportGenerationQueueUrl: ${self:custom.textReportGenerationQueueUrl.${self:provider.stage}, self:custom.textReportGenerationQueueUrl.remote}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    MONGODB_URI: ${env:${self:custom.mongodbUriEnvVar.${self:provider.stage}, self:custom.mongodbUriEnvVar.dev}}
    MONGODB_DATABASE: tangential-${opt:stage}

  httpApi:
    cors:
      allowedOrigins:
        - "https://${self:provider.stage}.tangential.app"
        - "https://tangential.eu.ngrok.io"
      allowedHeaders:
        - "Content-Type"
        - "X-Atlassian-Token"
        - "X-Atlassian-Refresh-Token"
        - "X-Atlassian-Workspace-Id"
      allowCredentials: false

custom:
  offlineQueueUrl: ${self:custom.serverless-offline-sqs.endpoint}/000000000000

  packageIndividually:
    offline: false
  mongodbUriEnvVar:
    offline: MONGODB_URI_OFFLINE
    dev: MONGODB_URI_DEV
    live: MONGODB_URI_LIVE
  jiraAnalysisQueueUrl:
    offline: ${self:custom.offlineQueueUrl}/JiraAnalysisQueue-${self:provider.stage}
    remote:
      Ref: JiraAnalysisQueue

  updateProjectAnalysisStatusQueueUrl:
    offline: ${self:custom.offlineQueueUrl}/UpdateProjectAnalysisStatusQueueFifo-${self:provider.stage}.fifo
    remote:
      Ref: UpdateProjectAnalysisStatusQueueFifo

  textReportGenerationQueueUrl:
    offline: ${self:custom.offlineQueueUrl}/ReportGenerationQueue-${self:provider.stage}
    remote:
      Ref: ReportGenerationQueue

  serverless-offline-sqs:
    endpoint: http://localhost:4566
    region: us-east-1
    debug: true

  customDomain:
    domainName: ${self:provider.stage}.api.tangential.app
    stage: $default
    certificateArn: arn:aws:acm:us-east-1:556167323904:certificate/ba19fbb2-0c34-4cd6-984a-0c5562fd6e9d
    endpointType: regional
    hostedZoneId: Z091731134YSQCRRMM86I
    apiType: http
    autoDomain: true

functions:
  ### HTTP API ###

  startWorkspaceAnalysis:
    handler: src/functions/startWorkspaceAnalysis.handler
    events:
      - httpApi:
          method: get
          path: /workspace/analyze

  startProjectAnalysis:
    handler: src/functions/startProjectAnalysis.handler
    events:
      - httpApi:
          method: post
          path: /project/analyze

  startTextReportGeneration:
    handler: src/functions/startTextReportGeneration.handler
    events:
      - httpApi:
          method: post
          path: /generateReport

  templates:
    handler: src/functions/templates.handler
    events:
      - httpApi:
          method: get
          path: /templates

  ### Queue Handlers ###

  analysisQueueHandler:
    handler: src/functions/analysisQueueHandler.handler
    events:
      - sqs:
          arn: !GetAtt JiraAnalysisQueue.Arn
          batchSize: 5

  updateProjectAnalysisStatusQueueHandler:
    handler: src/functions/updateProjectAnalysisStatus.handler
    events:
      - sqs:
          arn: !GetAtt UpdateProjectAnalysisStatusQueueFifo.Arn
          batchSize: 5

  ReportGenerationQueueHandler:
    handler: src/functions/generateTextReport.handler
    events:
      - sqs:
          arn: !GetAtt ReportGenerationQueue.Arn
          batchSize: 5

resources:
  Resources:
    JiraAnalysisQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: JiraAnalysisQueue-${self:provider.stage}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt JiraAnalysisDeadLetterQueue.Arn
          maxReceiveCount: 2
        VisibilityTimeout: ${self:provider.timeout}

    JiraAnalysisDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: JiraAnalysisDeadLetterQueue-${self:provider.stage}

    UpdateProjectAnalysisStatusQueueFifo:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: UpdateProjectAnalysisStatusQueueFifo-${self:provider.stage}.fifo
        VisibilityTimeout: ${self:provider.timeout}
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt UpdateProjectAnalysisStatusDeadLetterQueueFifo.Arn
          maxReceiveCount: 2

    UpdateProjectAnalysisStatusDeadLetterQueueFifo:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: UpdateProjectAnalysisStatusDeadLetterQueueFifo-${self:provider.stage}.fifo
        FifoQueue: true
        ContentBasedDeduplication: true

    ReportGenerationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ReportGenerationQueue-${self:provider.stage}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt WriteReportDeadLetterQueue.Arn
          maxReceiveCount: 2
        VisibilityTimeout: ${self:provider.timeout}

    WriteReportDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: WriteReportDeadLetterQueue-${self:provider.stage}
