service: tangential
frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-offline-sqs
  - serverless-dotenv-plugin

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 60
  stage: ${opt:stage, 'offline'}
  environment:
    projectAnalysisQueueUrl: ${self:custom.projectAnalysisQueueUrl.${self:provider.stage}, self:custom.projectAnalysisQueueUrl.remote}

custom:
  projectAnalysisQueueUrl:
    offline: ${self:custom.serverless-offline-sqs.endpoint}/queue/ProjectAnalysisQueue-${self:provider.stage}
    remote:
      Ref: ProjectAnalysisQueue
  serverless-offline-sqs:
    autoCreate: false
    apiVersion: "2012-11-05"
    endpoint: https://localhost:4566
    region: eu-west-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

functions:
  startWorkpaceAnalysis:
    handler: src/functions/startWorkspaceAnalysis.handler
    events:
      - http:
          method: get
          path: startWorkpaceAnalysis

  analyzeProjectFromQueue:
    handler: src/functions/analyzeProjectFromQueue.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ProjectAnalysisQueue
              - Arn
          batchSize: 5

resources:
  Resources:
    ProjectAnalysisQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ProjectAnalysisQueue-${self:provider.stage}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt ProjectAnalysisDeadLetterQueue.Arn
          maxReceiveCount: 2
        VisibilityTimeout: ${self:provider.timeout}

    ProjectAnalysisDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ProjectAnalysisDeadLetterQueue-${self:provider.stage}
